<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Fiber</title>
      <link href="/hei-blog/2023/09/18/fiber/"/>
      <url>/hei-blog/2023/09/18/fiber/</url>
      
        <content type="html"><![CDATA[<h3 id="React-15-architecture"><a href="#React-15-architecture" class="headerlink" title="React 15 architecture"></a>React 15 architecture</h3><p>During components initialization or updates, child components are updated recursively. Since it’s a recursive process, once the update begins, it cannot be interrupted. When the component hierarchy is deep, and the recursive updates take longer than 16.6ms (most mainstream browsers refresh every 16.6ms), in this scenario, the user interaction interface is stuck, resulting in a poor user experience.</p><ul><li><p>In the <strong>Reconciler</strong>, mount components invoke <code>mountComponent</code>, and update components invoke <code>updateComponent</code>. Both of these methods recursively update child components.</p></li><li><p>Stack <strong>Reconciler</strong>: Identifying the changed components</p><ol><li>Call the render method of functional or class components, converting the returned JSX into a virtual DOM.</li><li>Compare the current virtual DOM with the virtual DOM from the previous update.</li><li>Identify the changed virtual DOM components for this update.</li><li>Notify the Renderer to render the changed virtual DOM on the page.</li></ol></li><li><p><strong>Renderer</strong>: Responsible for rendering the changed components onto the page.</p></li></ul><h3 id="React-Fiber-Architecture"><a href="#React-Fiber-Architecture" class="headerlink" title="React Fiber Architecture"></a>React Fiber Architecture</h3><ul><li>Interruptible asynchronous updates</li><li><strong>Scheduler</strong>: Prioritizes tasks, with high-priority tasks entering the Reconciler first.</li><li><strong>Fiber Reconciler</strong>: Responsible for identifying changed components.<ol><li>Supports tasks of different priorities, interruptibility, and resumption, with the ability to reuse previous intermediate states upon resumption.</li><li>Task update units correspond to Fiber nodes associated with React Elements.</li><li>It doesn’t use Generators to implement the reconciler; it has its own asynchronous interruptible update mechanism.</li><li>Fiber replaces the term “React 16 virtual DOM.”</li></ol></li><li><strong>Renderer</strong>: Renders the changed components onto the page.</li></ul><h3 id="Fiber-Node-Structure"><a href="#Fiber-Node-Structure" class="headerlink" title="Fiber Node Structure"></a>Fiber Node Structure</h3><ul><li>Static data structure: Each Fiber node corresponds to a React element, storing information such as component type, associated DOM node, etc.<ul><li>tag, key, elementType, type, stateNode</li></ul></li><li>Properties for forming the Fiber tree by connecting to other Fiber nodes<ul><li>return: Points to the parent Fiber node. “return” indicates the next node to execute after completing the “completeWork” process. child: Points to the child Fiber node. sibling: Points to the first right sibling Fiber node.</li></ul></li><li>Properties as dynamic work units: Each Fiber node stores the component’s changed state and the work to be executed for this update (deletion, insertion, or update).<ul><li>pendingProps, memoizedProps, updateQueue, memoizedState</li></ul></li><li>Scheduling priority-related properties<ul><li>lanes, childLanes</li></ul></li><li>Properties pointing to the corresponding Fiber in the next update<ul><li>alternate</li></ul></li></ul><h4 id="Fiber-Objects"><a href="#Fiber-Objects" class="headerlink" title="Fiber Objects"></a>Fiber Objects</h4><p>A Fiber object represents a component (React Element) that is either about to be rendered or has already been rendered. A component may correspond to two fibers (current and WorkInProgress).</p><p>React Fiber is implemented using a linked list. Each Virtual DOM can be represented as a fiber. In the diagram below, each node is a fiber. A fiber includes properties such as child (the first child node), sibling (sibling node), return (parent node), and so on. The React Fiber mechanism relies on this data structure for its implementation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class FiberNode &#123;</span><br><span class="line">  constructor(tag, pendingProps, key, mode) &#123;</span><br><span class="line">    // instance attribute</span><br><span class="line">    this.tag = tag; //  Marks different component types, such as functional components, class components, text, native components</span><br><span class="line">    this.key = key; // The key on the React element is the one written in JSX, which is also the one on the final ReactElement.</span><br><span class="line">    this.elementType = null; // The first parameter of createElement, the &#x27;type&#x27; on ReactElement.</span><br><span class="line">    this.type = null; // Represents the actual type of the fiber. &#x27;elementType&#x27; is almost the same, but may differ when features like lazy loading are used.</span><br><span class="line">    this.stateNode = null; // Instance object, for example, if it&#x27;s a class component, the instance is mounted here; if it&#x27;s a RootFiber, it holds the FiberRoot; if it&#x27;s a native node, it&#x27;s the DOM object.</span><br><span class="line"></span><br><span class="line">    // fiber</span><br><span class="line">    this.return = null; // Parent node, points to the previous fiber.</span><br><span class="line">    this.child = null; //  Child node, points to the first fiber below itself.</span><br><span class="line">    this.sibling = null; //// Sibling component, points to a sibling node.</span><br><span class="line">    this.index = 0; //  // Typically 0 if there are no sibling nodes. When the child nodes of a parent node are of an array type, each child node is assigned an index. The index is used in conjunction with the key for diffing.</span><br><span class="line">    this.ref = null; // The &#x27;ref&#x27; attribute on ReactElement.</span><br><span class="line"></span><br><span class="line">    this.pendingProps = pendingProps; // New props, passed from the &#x27;ReactElement&#x27; object. Used to compare with &#x27;fiber.memoizedProps&#x27; to determine if the attributes have changed.</span><br><span class="line">    this.memoizedProps = null; // Old props, the attributes used during the previous generation of child nodes. Kept in memory after generating child nodes.</span><br><span class="line"></span><br><span class="line">    this.updateQueue = null; // Update queue on the fiber. A new update is attached to this property every time &#x27;setState&#x27; is called. Each update eventually forms a linked list structure, and batch updates are performed later.</span><br><span class="line">    this.memoizedState = null; // Corresponds to &#x27;memoizedProps,&#x27; the state from the last render, essentially the current state. Think of it as a relationship between the previous and current states.</span><br><span class="line"></span><br><span class="line">    this.mode = mode; // Indicates how child components are rendered within the current component.</span><br><span class="line"></span><br><span class="line">    // Flags</span><br><span class="line">    this.flags: Flags; // Flags or indicators.</span><br><span class="line">    this.subtreeFlags: Flags; // Replaces &#x27;firstEffect&#x27; and &#x27;nextEffect&#x27; in version 16.x. Enabled only when &#x27;enableNewReconciler&#x27; is set to true.</span><br><span class="line">    this.effectTag = NoEffect; // Indicates the type of update to be performed on the current fiber (update, delete, etc.).</span><br><span class="line"></span><br><span class="line">    // Effects</span><br><span class="line">    this.nextEffect = null; // Points to the next fiber that needs an update.</span><br><span class="line">    this.firstEffect = null; // Points to the first fiber among all child nodes that needs an update.</span><br><span class="line">    this.lastEffect = null; // Points to the last fiber among all child nodes that needs an update.</span><br><span class="line">    this.expirationTime = NoWork; // Expiration time represents when the task should be completed in the future.</span><br><span class="line">    this.childExpirationTime = NoWork; // Child expiration time.</span><br><span class="line"></span><br><span class="line">    this.alternate = null; // Mutual reference between the current tree and the work-in-progress tree.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-Fiber-is-used-in-React16-but-there-is-no-Fiber-in-Vue-why"><a href="#React-Fiber-is-used-in-React16-but-there-is-no-Fiber-in-Vue-why" class="headerlink" title="React Fiber is used in React16, but there is no Fiber in Vue, why?"></a>React Fiber is used in React16, but there is no Fiber in Vue, why?</h3><p>Cause the two have different optimization ideas</p><ul><li>Vue is a component-level update based on templates and watchers, splitting each update task small enough that it doesn’t need to use the Fiber architecture to split the task at a finer granularity.</li><li>No matter where React calls setState, the update starts from the root node, and the update task is huge. Hence, you need to use Fiber to split the enormous task into multiple small tasks, which can be interrupted and resumed without blocking the main process from executing high-priority tasks.</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Reconciliation</title>
      <link href="/hei-blog/2023/09/05/reconciler/"/>
      <url>/hei-blog/2023/09/05/reconciler/</url>
      
        <content type="html"><![CDATA[<p>Reconciliation is the process by which React updates the UI to reflect the changes in the component state.<br>When a component’s state or props change, React will compare the current virtual DOM with the updated virtual DOM and make the minimum number of changes necessary to reflect the new state.</p><p>Reconciliation is a key feature of ReactJS that allows developers to build highly performant and responsive user interfaces.</p><p>Important concepts behind the working of the Reconciliation process are:</p><ul><li>Virtual DOM</li><li>Diffing algorithm</li></ul><h3 id="What-is-the-Virtual-DOM"><a href="#What-is-the-Virtual-DOM" class="headerlink" title="What is the Virtual DOM?"></a>What is the Virtual DOM?</h3><p>The VDOM is a lightweight in-memory representation of the actual DOM.</p><p>When the state of a component changes, React compares the VDOM of the last and current states and calculates the minimum number of DOM operations required to update the actual DOM to match the current VDOM.</p><h3 id="What-is-the-reconciliation-algorithm-in-React"><a href="#What-is-the-reconciliation-algorithm-in-React" class="headerlink" title="What is the reconciliation algorithm in React?"></a>What is the reconciliation algorithm in React?</h3><p>The reconciliation algorithm is React’s way of efficiently updating the DOM when the application’s state changes. It compares the current component tree (Virtual DOM) with the new one, calculates the differences (diff), and then makes the necessary updates to the actual DOM.</p><h3 id="What-is-the-role-of-keys-in-reconciliation"><a href="#What-is-the-role-of-keys-in-reconciliation" class="headerlink" title="What is the role of keys in reconciliation?"></a>What is the role of keys in reconciliation?</h3><p>Keys are used to uniquely identify child elements within a component. By assigning a unique key to each child, React can quickly identify which elements have changed, and which can be reused, making the reconciliation process more efficient.</p><h3 id="Practices-for-optimizing-reconciliation"><a href="#Practices-for-optimizing-reconciliation" class="headerlink" title="Practices for optimizing reconciliation?"></a>Practices for optimizing reconciliation?</h3><p>including:<br>the use of keys, avoiding unnecessary updates, using PureComponent and React.memo, optimizing component hierarchy, using keyed updates for dynamic lists, optimizing DOM manipulations</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSX transform</title>
      <link href="/hei-blog/2023/08/31/jsx-transform/"/>
      <url>/hei-blog/2023/08/31/jsx-transform/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-JSX"><a href="#What-is-JSX" class="headerlink" title="What is JSX"></a>What is JSX</h2><p>JSX stands for javascript XML. JSX means javascript execute. JSX is the Syntax Extension of javascript. It looks the same as HTML but, it is an inline markup language to create React elements and used to describe what UI should appear.</p><h3 id="JSX-transform"><a href="#JSX-transform" class="headerlink" title="JSX transform"></a>JSX transform</h3><p>JSX is not supported by browsers. It uses compilers like Babel or Typescript to transform JSX into regular JavaScript which is processed by browsers.  </p><p>JSX which provides us to write HTML in react is not recognized by the browser out of the box. Therefore react developers depend on compilers similar to Babel or typescript to transform JSX code into regular JavaScript. </p><p>With the new transform, one can use JSX without importing react. Also, the compiled output may improve the bundle size which may depend on one’s setup.</p><h4 id="Old-JSX-transform"><a href="#Old-JSX-transform" class="headerlink" title="Old JSX transform"></a>Old JSX transform</h4><p>The limitation of old JSX transform, we need to import React so that javascript knows what to do with the compiled code.</p><p>Let us assume your code looks like as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">function App() &#123;</span><br><span class="line">   return &lt;div&gt;JSX transform&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compilers convert JSX code into regular javascript as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">function App() &#123;</span><br><span class="line">   return React.createElement(&#x27;div&#x27;, null, &#x27;JSX transform&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="New-JSX-transform"><a href="#New-JSX-transform" class="headerlink" title="New JSX transform"></a>New JSX transform</h4><p>The new transform solves the above issue by two new entry points to use React that can directly be used by the compiler without any need to transform the JSX code to React.createElement. </p><p>This means it is possible to write JSX without importing the React library at the top level or having React in scope. In auto-runtime mode, JSX is converted to a new entry function, <code>import &#123;jsx as _jsx&#125; from &#39;react/jsx-runtime.&#39;</code></p><ul><li>Automatically import <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;jsx as _jsx&#125; from &#x27;react/jsx-runtime&#x27;; //  Automatically import by the compiler</span><br><span class="line">function App() &#123;</span><br><span class="line">   return _jsx(&#x27;div&#x27;, &#123; children: &#x27;JSX transform&#x27; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Pass the key as a parameter<br>The key and ref can be passed through the … extension operator, which makes it impossible to directly tell if key and ref are being passed in this <code>&lt;div &#123;... .props&#125; /&gt;</code>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const props = &#123;</span><br><span class="line">   value: 0,</span><br><span class="line">   key: &#x27;foo&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;div key=&quot;foo&quot; &#123;...props&#125;&gt;</span><br><span class="line">   &lt;span&gt;hello&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;;</span><br></pre></td></tr></table></figure><p>new jsx transform:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const props = &#123;</span><br><span class="line">  value: 0,</span><br><span class="line">  key: &#x27;foo&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_jsx(</span><br><span class="line">  &quot;div&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    children: [_jsx(&quot;span&quot;, &#123;</span><br><span class="line">      children: &quot;hello&quot;</span><br><span class="line">    &#125;)]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;foo&quot;, // as a parameter</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_createElement(</span><br><span class="line">  &quot;div&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    key: &quot;foo&quot; // as part of props</span><br><span class="line">  &#125;, _jsx(&quot;span&quot;, &#123;</span><br><span class="line">    children: &quot;hello&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Implement-JSX-method"><a href="#Implement-JSX-method" class="headerlink" title="Implement JSX method"></a>Implement JSX method</h3><p>including:</p><ul><li>jsxDEV (dev environment)</li><li>jsx (prod environment)</li><li>React.createElement</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* </span><br><span class="line">* @param type </span><br><span class="line">* @param config </span><br><span class="line">* @param maybeKey</span><br><span class="line">* @returns return ReactElement</span><br><span class="line">*/</span><br><span class="line">const jsx = (type: ElementType, config: any, maybeKey: any) =&gt; &#123;</span><br><span class="line">   // init</span><br><span class="line">   let key = null;</span><br><span class="line">   let ref = null;</span><br><span class="line"></span><br><span class="line">   // create props to store attributes </span><br><span class="line">   const props: Props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   // iterate config and extract ref, key attributes</span><br><span class="line">   for (const prop in config) &#123;</span><br><span class="line">      const val = config[prop];</span><br><span class="line">      if (prop === &quot;key&quot;) &#123;</span><br><span class="line">         continue;</span><br><span class="line">      &#125;</span><br><span class="line">      if (prop === &quot;ref&quot;) &#123;</span><br><span class="line">         if (val !== undefined) &#123;</span><br><span class="line">            ref = val;</span><br><span class="line">         &#125;</span><br><span class="line">         continue;</span><br><span class="line">      &#125;</span><br><span class="line">      // use &#123;...props&#125; pass all the attributes</span><br><span class="line">      if (&#123;&#125;.hasOwnProperty.call(config, prop)) &#123;</span><br><span class="line">         props[prop] = val;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   // add maybeKey to key</span><br><span class="line">   if (maybeKey !== undefined) &#123;</span><br><span class="line">      key = &quot;&quot; + maybeKey;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   return ReactElement(type, key, ref, props);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding guidelines &amp; practices</title>
      <link href="/hei-blog/2023/08/30/Code-standard/"/>
      <url>/hei-blog/2023/08/30/Code-standard/</url>
      
        <content type="html"><![CDATA[<p>To ensure code quality and bug-free code we should follow some guidelines.</p><h3 id="Set-up-ESlint"><a href="#Set-up-ESlint" class="headerlink" title="Set up ESlint"></a>Set up ESlint</h3><p>Eslint can quickly finds problems in your code and also suggests solutions to fix these problems.</p><ul><li>install<ul><li>pnpm i eslint -D -w</li></ul></li><li>init<ul><li>npx eslint –init</li><li>pnpm i -D -w @typescript-eslint&#x2F;eslint-plugin @typescript-eslint&#x2F;parser</li></ul></li></ul><h3 id="Code-style-prettier"><a href="#Code-style-prettier" class="headerlink" title="Code style - prettier"></a>Code style - prettier</h3><p>Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules</p><ul><li>install<ul><li>pnpm i prettier -D -w</li></ul></li><li>Prettier integrate to eslint<ul><li>pnpm i eslint-config-prettier eslint-plugin-prettier -D -w<ul><li>eslint-config-prettier: cover ESlint’s own rule configuration</li><li>eslint-plugin-prettier: use prettier to take over repair codes<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;printWidth&quot;: 80,</span><br><span class="line">     &quot;tabWidth&quot;: 2,</span><br><span class="line">     &quot;javascript.preferences.quoteStyle&quot;: &quot;single&quot;,</span><br><span class="line">     &quot;useTabs&quot;: true,</span><br><span class="line">     &quot;singleQuote&quot;: true,</span><br><span class="line">     &quot;semi&quot;: true,</span><br><span class="line">     &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class="line">     &quot;bracketSpacing&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="Commits-style"><a href="#Commits-style" class="headerlink" title="Commits style"></a>Commits style</h3><h4 id="1-Husky"><a href="#1-Husky" class="headerlink" title="1. Husky"></a>1. Husky</h4><p>Husky improves your commits.</p><ul><li>install<ul><li>pnpm i husky -D -w</li></ul></li><li>init<ul><li>npx husky install<ul><li>create <code>.husky/dir</code> and enable git hooks</li></ul></li></ul></li><li>Add a hook: pnpm lint, add to husky<ul><li>npx husky add .husky&#x2F;pre-commit “pnpm lint”<ul><li>To add a command to a hook or create a new one, use husky add <file> [cmd]</li></ul></li></ul></li></ul><h4 id="2-Commitlint"><a href="#2-Commitlint" class="headerlink" title="2. Commitlint"></a>2. Commitlint</h4><p>Commitlint is a tool that lints your commit messages and makes sure they follow a set of rules. It runs as a husky pre-commit hook, that is, it runs before the code is committed and blocks the commit in case it fails the lint checks.</p><ul><li>install<ul><li>pnpm i commitlint @commitlint&#x2F;cli @commitlint&#x2F;config-conventional -D -w</li></ul></li><li>create <code>.commitlintrc.js</code> config file<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&#x27;@commitlint/config-conventional&#x27;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>integrate to husky<ul><li>npx husky add .husky&#x2F;commit-msg “npx –no-install commitlint -e $HUSKY_GIT_PARAMS”</li></ul></li><li>format: <code>&lt;type&gt;: &lt;subject&gt;</code><ul><li>feat: add new feature</li><li>fix: fix bug</li><li>chore: changes do not affect functionality</li><li>docs: documents</li><li>perf: performance</li><li>refactor: refactor</li><li>test: test</li></ul></li></ul><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><p>Typescript compiler uses tsconfig.json to get configuration options fro generating Javascript code from Typescript source code.</p><ul><li>create tsconfig.json<ul><li>npm install typescript -g</li><li>tsc –init <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compileOnSave&quot;: true,</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;ESNext&quot;,</span><br><span class="line">        &quot;useDefineForClassFields&quot;: true,</span><br><span class="line">        &quot;module&quot;: &quot;ESNext&quot;,</span><br><span class="line">        &quot;lib&quot;: [&quot;ESNext&quot;, &quot;DOM&quot;],</span><br><span class="line">        &quot;moduleResolution&quot;: &quot;Node&quot;,</span><br><span class="line">        &quot;strict&quot;: true,</span><br><span class="line">        &quot;sourceMap&quot;: true,</span><br><span class="line">        &quot;resolveJsonModule&quot;: true,</span><br><span class="line">        &quot;isolatedModules&quot;: true,</span><br><span class="line">        &quot;esModuleInterop&quot;: true,</span><br><span class="line">        &quot;noEmit&quot;: true,</span><br><span class="line">        &quot;noUnusedLocals&quot;: true,</span><br><span class="line">        &quot;noUnusedParameters&quot;: true,</span><br><span class="line">        &quot;noImplicitReturns&quot;: false,</span><br><span class="line">        &quot;skipLibCheck&quot;: true,</span><br><span class="line">        &quot;baseUrl&quot;: &quot;./src&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><p>Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application</p><ul><li>install<ul><li>pnpm i -D -w rollup<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    input: &#x27;src/main.js&#x27;, // entry point</span><br><span class="line">    output: &#123;</span><br><span class="line">    file: &#x27;./dist/bundle.js&#x27;, // output</span><br><span class="line">    format: &#x27;umd&#x27;, </span><br><span class="line">    name: &#x27;pkg name&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [], // plugins config</span><br><span class="line">    external: [&#x27;lodash&#x27;], // external module</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is a Monorepo?</title>
      <link href="/hei-blog/2023/08/28/meno-repo/"/>
      <url>/hei-blog/2023/08/28/meno-repo/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-a-Monorepo"><a href="#What-is-a-Monorepo" class="headerlink" title="What is a Monorepo?"></a>What is a Monorepo?</h2><p>A Monorepo is a version-controlled code repository that refers to managing multiple projects in a single codebase, which helps simplify the complexity of code sharing, version control, construction, and deployment. While these projects may be related, they are often logically independent and run by different teams.</p><h3 id="Monorepo-history"><a href="#Monorepo-history" class="headerlink" title="Monorepo history"></a>Monorepo history</h3><ul><li><p>Stage one: Monolithic architecture<br>A monolithic architecture exists at the very early stage of your project. It has two main features. One code base, it is managed by only one git repo. Coupled, all features, utils and services are coupled.</p><ul><li>advantages: due to the simplicity of one code base, easy to develop, deploy and debug.</li><li>disadvantages: appear as the application grows bigger and bigger. Making a small change requires compiling, deploying and testing the entire project. Low scalability and low flexibility.</li></ul></li><li><p>Stage two: MultiRepo<br>The multi-repo approach uses several repositories to host the multiple libraries or services of a project developed by a company.</p><ul><li>advantages: code separately, independent library version, independent service releases</li><li>disadvantages: hard to share resources, such as components, configs, utils, and test suites; need publish separately and manually manage the versions of these dependencies. increased risk of code changes by non-owners. increased risk of code duplication.</li></ul></li><li><p>Stage three: MonoRepo</p><ul><li>advantages: easy to share resources and manage dependencies; independent and flexible, package itself can have its own dependencies as well as shared dependencies.Coding Styles</li><li>disadvantages: slow git pull, git repo grows bigger and bigger; deploy coupled</li></ul></li></ul><p><img src="/hei-blog/images/img/compare.webp"></p><h3 id="Monorepo-Solution"><a href="#Monorepo-Solution" class="headerlink" title="Monorepo Solution"></a>Monorepo Solution</h3><ul><li>Lerna is a tool for managing JavaScript projects with multiple packages, built on Yarn.</li><li>Turborepo is a high-performance build system for JavaScript and TypeScript codebases.</li><li>pnpm is a JavaScript dependency management tool that supports monorepos through a set of dedicated commands called pnpm multi.<ul><li>In pnpm, packages are always reused if they are already installed for another project saving a lot of disk space which makes it faster and more efficient than npm.</li></ul></li></ul><h3 id="Set-up-with-pnpm"><a href="#Set-up-with-pnpm" class="headerlink" title="Set up with pnpm"></a>Set up with pnpm</h3><ol><li>Install pnpm<br><code>npm install -g pnpm</code></li><li>Initialize a new pnpm workspace<br>create a new folder named <code>pnpm-mono</code>, cd into it and then run <code>pnpm init</code> to generate a top-level <code>package.json</code>. This will be the root <code>package.json</code> for our PNPM monorepo.</li><li>Create a <code>pnpm-workspace.yaml</code> file at the root of the repository, defining the monorepo structure<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - packages/*</span><br></pre></td></tr></table></figure>This configuration instructs pnpm to look for all projects under the folder named packages</li><li>Enable the pnpm workspaces feature in the <code>package.json</code> file in the root directory<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;name&quot;: &quot;monorepo-demo&quot;,</span><br><span class="line">     &quot;private&quot;: true,</span><br><span class="line">     &quot;workspaces&quot;: &#123;</span><br><span class="line">         &quot;packages&quot;: [&quot;packages/*&quot;]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>Create sub projects, under the packages directory</li><li>To add a local dependency within a monorepo, in your <code>package.json</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;:&#123;</span><br><span class="line">     &quot;shared&quot;: &quot;workspace:*&quot; // (where &#x27;*&#x27; means &quot;any version&quot;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>Install dependencies<br>All packages can use the dependency if it is installed in the root directory. How do we install a dependency for a specific package?<br><code>pnpm --filter &lt;package_selector&gt; &lt;command&gt;</code>, such as <code>pnpm --filter @packages/shared add lodash</code></li><li>if PackageA refers to packageB<br><code>pnpm --filter @packages/A add @packages/B@*</code>, <code>@*</code> denotes the latest version is synchronized by default</li></ol>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Front-end </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
