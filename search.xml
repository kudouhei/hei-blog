<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Coding guidelines &amp; practices</title>
      <link href="/hei-blog/2023/08/30/Code-standard/"/>
      <url>/hei-blog/2023/08/30/Code-standard/</url>
      
        <content type="html"><![CDATA[<p>To ensure code quality and bug-free code we should follow some guidelines.</p><h3 id="Set-up-ESlint"><a href="#Set-up-ESlint" class="headerlink" title="Set up ESlint"></a>Set up ESlint</h3><p>Eslint can quickly finds problems in your code and also suggests solutions to fix these problems.</p><ul><li>install<ul><li>pnpm i eslint -D -w</li></ul></li><li>init<ul><li>npx eslint –init</li><li>pnpm i -D -w @typescript-eslint&#x2F;eslint-plugin @typescript-eslint&#x2F;parser</li></ul></li></ul><h3 id="Code-style-prettier"><a href="#Code-style-prettier" class="headerlink" title="Code style - prettier"></a>Code style - prettier</h3><p>Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules</p><ul><li>install<ul><li>pnpm i prettier -D -w</li></ul></li><li>Prettier integrate to eslint<ul><li>pnpm i eslint-config-prettier eslint-plugin-prettier -D -w<ul><li>eslint-config-prettier: cover ESlint’s own rule configuration</li><li>eslint-plugin-prettier: use prettier to take over repair codes<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;printWidth&quot;: 80,</span><br><span class="line">     &quot;tabWidth&quot;: 2,</span><br><span class="line">     &quot;javascript.preferences.quoteStyle&quot;: &quot;single&quot;,</span><br><span class="line">     &quot;useTabs&quot;: true,</span><br><span class="line">     &quot;singleQuote&quot;: true,</span><br><span class="line">     &quot;semi&quot;: true,</span><br><span class="line">     &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class="line">     &quot;bracketSpacing&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="Commits-style"><a href="#Commits-style" class="headerlink" title="Commits style"></a>Commits style</h3><h4 id="1-Husky"><a href="#1-Husky" class="headerlink" title="1. Husky"></a>1. Husky</h4><p>Husky improves your commits.</p><ul><li>install<ul><li>pnpm i husky -D -w</li></ul></li><li>init<ul><li>npx husky install<ul><li>create <code>.husky/dir</code> and enable git hooks</li></ul></li></ul></li><li>Add a hook: pnpm lint, add to husky<ul><li>npx husky add .husky&#x2F;pre-commit “pnpm lint”<ul><li>To add a command to a hook or create a new one, use husky add <file> [cmd]</li></ul></li></ul></li></ul><h4 id="2-Commitlint"><a href="#2-Commitlint" class="headerlink" title="2. Commitlint"></a>2. Commitlint</h4><p>Commitlint is a tool that lints your commit messages and makes sure they follow a set of rules. It runs as a husky pre-commit hook, that is, it runs before the code is committed and blocks the commit in case it fails the lint checks.</p><ul><li>install<ul><li>pnpm i commitlint @commitlint&#x2F;cli @commitlint&#x2F;config-conventional -D -w</li></ul></li><li>create <code>.commitlintrc.js</code> config file<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&#x27;@commitlint/config-conventional&#x27;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>integrate to husky<ul><li>npx husky add .husky&#x2F;commit-msg “npx –no-install commitlint -e $HUSKY_GIT_PARAMS”</li></ul></li><li>format: <code>&lt;type&gt;: &lt;subject&gt;</code><ul><li>feat: add new feature</li><li>fix: fix bug</li><li>chore: changes do not affect functionality</li><li>docs: documents</li><li>perf: performance</li><li>refactor: refactor</li><li>test: test</li></ul></li></ul><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><p>Typescript compiler uses tsconfig.json to get configuration options fro generating Javascript code from Typescript source code.</p><ul><li>create tsconfig.json<ul><li>npm install typescript -g</li><li>tsc –init <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compileOnSave&quot;: true,</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;ESNext&quot;,</span><br><span class="line">    &quot;useDefineForClassFields&quot;: true,</span><br><span class="line">    &quot;module&quot;: &quot;ESNext&quot;,</span><br><span class="line">    &quot;lib&quot;: [&quot;ESNext&quot;, &quot;DOM&quot;],</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;Node&quot;,</span><br><span class="line">    &quot;strict&quot;: true,</span><br><span class="line">    &quot;sourceMap&quot;: true,</span><br><span class="line">    &quot;resolveJsonModule&quot;: true,</span><br><span class="line">    &quot;isolatedModules&quot;: true,</span><br><span class="line">    &quot;esModuleInterop&quot;: true,</span><br><span class="line">    &quot;noEmit&quot;: true,</span><br><span class="line">    &quot;noUnusedLocals&quot;: true,</span><br><span class="line">    &quot;noUnusedParameters&quot;: true,</span><br><span class="line">    &quot;noImplicitReturns&quot;: false,</span><br><span class="line">    &quot;skipLibCheck&quot;: true,</span><br><span class="line">    &quot;baseUrl&quot;: &quot;./src&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><p>Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application</p><ul><li>install<ul><li>pnpm i -D -w rollup<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  input: &#x27;src/main.js&#x27;, // entry point</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#x27;./dist/bundle.js&#x27;, // output</span><br><span class="line">    format: &#x27;umd&#x27;, </span><br><span class="line">    name: &#x27;pkg name&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [], // plugins config</span><br><span class="line">  external: [&#x27;lodash&#x27;], // external module</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What is a Monorepo?</title>
      <link href="/hei-blog/2023/08/28/meno-repo/"/>
      <url>/hei-blog/2023/08/28/meno-repo/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-a-Monorepo"><a href="#What-is-a-Monorepo" class="headerlink" title="What is a Monorepo?"></a>What is a Monorepo?</h2><p>A Monorepo is a version-controlled code repository that refers to managing multiple projects in a single codebase, which helps simplify the complexity of code sharing, version control, construction, and deployment. While these projects may be related, they are often logically independent and run by different teams.</p><h3 id="Monorepo-history"><a href="#Monorepo-history" class="headerlink" title="Monorepo history"></a>Monorepo history</h3><ul><li><p>Stage one: Monolithic architecture<br>A monolithic architecture exists at the very early stage of your project. It has two main features. One code base, it is managed by only one git repo. Coupled, all features, utils and services are coupled.</p><ul><li>advantages: due to the simplicity of one code base, easy to develop, deploy and debug.</li><li>disadvantages: appear as the application grows bigger and bigger. Making a small change requires compiling, deploying and testing the entire project. Low scalability and low flexibility.</li></ul></li><li><p>Stage two: MultiRepo<br>The multi-repo approach uses several repositories to host the multiple libraries or services of a project developed by a company.</p><ul><li>advantages: code separately, independent library version, independent service releases</li><li>disadvantages: hard to share resources, such as components, configs, utils, and test suites; need publish separately and manually manage the versions of these dependencies. increased risk of code changes by non-owners. increased risk of code duplication.</li></ul></li><li><p>Stage three: MonoRepo</p><ul><li>advantages: easy to share resources and manage dependencies; independent and flexible, package itself can have its own dependencies as well as shared dependencies.Coding Styles</li><li>disadvantages: slow git pull, git repo grows bigger and bigger; deploy coupled</li></ul></li></ul><p><img src="/hei-blog/images/img/compare.webp"></p><h3 id="Monorepo-Solution"><a href="#Monorepo-Solution" class="headerlink" title="Monorepo Solution"></a>Monorepo Solution</h3><ul><li>Lerna is a tool for managing JavaScript projects with multiple packages, built on Yarn.</li><li>Turborepo is a high-performance build system for JavaScript and TypeScript codebases.</li><li>pnpm is a JavaScript dependency management tool that supports monorepos through a set of dedicated commands called pnpm multi.<ul><li>In pnpm, packages are always reused if they are already installed for another project saving a lot of disk space which makes it faster and more efficient than npm.</li></ul></li></ul><h3 id="Set-up-with-pnpm"><a href="#Set-up-with-pnpm" class="headerlink" title="Set up with pnpm"></a>Set up with pnpm</h3><ol><li>Install pnpm<br><code>npm install -g pnpm</code></li><li>Initialize a new pnpm workspace<br>create a new folder named <code>pnpm-mono</code>, cd into it and then run <code>pnpm init</code> to generate a top-level <code>package.json</code>. This will be the root <code>package.json</code> for our PNPM monorepo.</li><li>Create a <code>pnpm-workspace.yaml</code> file at the root of the repository, defining the monorepo structure<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - packages/*</span><br></pre></td></tr></table></figure>This configuration instructs pnpm to look for all projects under the folder named packages</li><li>Enable the pnpm workspaces feature in the <code>package.json</code> file in the root directory<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;name&quot;: &quot;monorepo-demo&quot;,</span><br><span class="line">     &quot;private&quot;: true,</span><br><span class="line">     &quot;workspaces&quot;: &#123;</span><br><span class="line">         &quot;packages&quot;: [&quot;packages/*&quot;]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>Create sub projects, under the packages directory</li><li>To add a local dependency within a monorepo, in your <code>package.json</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;:&#123;</span><br><span class="line">     &quot;shared&quot;: &quot;workspace:*&quot; // (where &#x27;*&#x27; means &quot;any version&quot;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>Install dependencies<br>All packages can use the dependency if it is installed in the root directory. How do we install a dependency for a specific package?<br><code>pnpm --filter &lt;package_selector&gt; &lt;command&gt;</code>, such as <code>pnpm --filter @packages/shared add lodash</code></li><li>if PackageA refers to packageB<br><code>pnpm --filter @packages/A add @packages/B@*</code>, <code>@*</code> denotes the latest version is synchronized by default</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
